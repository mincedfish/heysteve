#name: Fetch Trail Rideability
#
#on:
#  workflow_dispatch:
#  schedule:
#    - cron: '0 */6 * * *'  # Run every 6 hours
#
#jobs:
#  update-rideability:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v2
#
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install openai
#
#      - name: Fetch rideability data
#        env:
#          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
#        run: |
#          python - <<EOF
#          import json
#          import os
#          import sys
#          from openai import OpenAI
#          from openai.error import RateLimitError, APIError
#
#          client = OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
#
#          def determine_rideability_ai(trail_data):
#              try:
#                  prompt = f"""
#                  Determine if the trail is rideable based on the following data:
#                  Current conditions: {json.dumps(trail_data['current'])}
#                  Historical data: {json.dumps(trail_data['history'])}
#                  Forecast: {json.dumps(trail_data['forecast'])}
#
#                  Respond with one of the following:
#                  1. "Rideable"
#                  2. "Not Rideable"
#                  3. "Caution"
#
#                  Provide a brief explanation for your decision.
#                  """
#
#                  response = client.chat.completions.create(
#                      model="gpt-3.5-turbo",
#                      messages=[
#                          {"role": "system", "content": "You are an expert trail condition analyzer."},
#                          {"role": "user", "content": prompt}
#                      ]
#                  )
#
#                  return response.choices[0].message.content.strip()
#              except RateLimitError as e:
#                  print(f"OpenAI API Rate Limit Error: {str(e)}", file=sys.stderr)
#                  return None
#              except APIError as e:
#                  print(f"OpenAI API Error: {str(e)}", file=sys.stderr)
#                  return None
#              except Exception as e:
#                  print(f"Unexpected error when calling OpenAI API: {str(e)}", file=sys.stderr)
#                  return None
#
#          def determine_rideability_fallback(trail_data):
#              current = trail_data['current']
#              history = trail_data['history']
#          
#              if float(history['rainfall']) > 0.5:
#                  return "Not Rideable", "High rainfall in the last 24 hours"
#              elif 'rain' in current['condition'].lower():
#                  return "Not Rideable", "Current conditions indicate rain"
#              elif float(current['humidity']) > 90:
#                  return "Caution", "High humidity may make trails slippery"
#              else:
#                  return "Rideable", "No significant issues detected"
#
#          # Read the existing JSON file
#          with open('public/trailStatuses.json', 'r') as f:
#              trail_statuses = json.load(f)
#
#          # Process each trail
#          for trail_name, trail_data in trail_statuses.items():
#              ai_rideability = determine_rideability_ai(trail_data)
#              if ai_rideability is None:
#                  status, explanation = determine_rideability_fallback(trail_data)
#                  rideability_info = f"{status}\n{explanation} (Fallback method used)"
#              else:
#                  rideability_info = ai_rideability
#          
#              trail_data['rideability'] = rideability_info
#              print(f"Updated rideability for {trail_name}: {rideability_info}")
#
#          # Write the updated data back to the JSON file
#          with open('public/trailStatuses.json', 'w') as f:
#              json.dump(trail_statuses, f, indent=2)
#
#          print("Rideability data update completed.")
#          EOF
#
#      - name: Commit and push changes
#        env:
#          GH_PAT: ${{ secrets.GH_PAT }}
#        run: |
#          git config --global user.name "github-actions[bot]"
#          git config --global user.email "github-actions[bot]@users.noreply.github.com"
#          git add -f public/trailStatuses.json  # Force add ignored file
#          git commit -m "Auto-update trail rideability" || echo "No changes to commit"
#          git push https://x-access-token:${GH_PAT}@github.com/mincedfish/heysteve.git HEAD:main
#
